/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKMCHAR_H
#define _MOCKMCHAR_H

#include "mchar.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC)
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockmchar_Init(void);
void Mockmchar_Destroy(void);
void Mockmchar_Verify(void);




#define subnstr_until_IgnoreAndReturn(cmock_retval) subnstr_until_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void subnstr_until_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define subnstr_until_ExpectAndReturn(str, until, newstr, maxlen, cmock_retval) subnstr_until_CMockExpectAndReturn(__LINE__, str, until, newstr, maxlen, cmock_retval)
void subnstr_until_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* str, char* until, char* newstr, int maxlen, char* cmock_to_return);
typedef char* (* CMOCK_subnstr_until_CALLBACK)(const char* str, char* until, char* newstr, int maxlen, int cmock_num_calls);
void subnstr_until_StubWithCallback(CMOCK_subnstr_until_CALLBACK Callback);
#define left_str_IgnoreAndReturn(cmock_retval) left_str_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void left_str_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define left_str_ExpectAndReturn(str, len, cmock_retval) left_str_CMockExpectAndReturn(__LINE__, str, len, cmock_retval)
void left_str_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* str, int len, char* cmock_to_return);
typedef char* (* CMOCK_left_str_CALLBACK)(char* str, int len, int cmock_num_calls);
void left_str_StubWithCallback(CMOCK_left_str_CALLBACK Callback);
#define format_byte_size_IgnoreAndReturn(cmock_retval) format_byte_size_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void format_byte_size_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define format_byte_size_ExpectAndReturn(str, size, cmock_retval) format_byte_size_CMockExpectAndReturn(__LINE__, str, size, cmock_retval)
void format_byte_size_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* str, long size, char* cmock_to_return);
typedef char* (* CMOCK_format_byte_size_CALLBACK)(char* str, long size, int cmock_num_calls);
void format_byte_size_StubWithCallback(CMOCK_format_byte_size_CALLBACK Callback);
#define trim_Ignore() trim_CMockIgnore()
void trim_CMockIgnore(void);
#define trim_Expect(str) trim_CMockExpect(__LINE__, str)
void trim_CMockExpect(UNITY_LINE_TYPE cmock_line, char* str);
typedef void (* CMOCK_trim_CALLBACK)(char* str, int cmock_num_calls);
void trim_StubWithCallback(CMOCK_trim_CALLBACK Callback);
#define sr_strncpy_Ignore() sr_strncpy_CMockIgnore()
void sr_strncpy_CMockIgnore(void);
#define sr_strncpy_Expect(dst, src, n) sr_strncpy_CMockExpect(__LINE__, dst, src, n)
void sr_strncpy_CMockExpect(UNITY_LINE_TYPE cmock_line, char* dst, char* src, int n);
typedef void (* CMOCK_sr_strncpy_CALLBACK)(char* dst, char* src, int n, int cmock_num_calls);
void sr_strncpy_StubWithCallback(CMOCK_sr_strncpy_CALLBACK Callback);
#define sr_set_locale_Ignore() sr_set_locale_CMockIgnore()
void sr_set_locale_CMockIgnore(void);
#define sr_set_locale_Expect() sr_set_locale_CMockExpect(__LINE__)
void sr_set_locale_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_sr_set_locale_CALLBACK)(int cmock_num_calls);
void sr_set_locale_StubWithCallback(CMOCK_sr_set_locale_CALLBACK Callback);
#define set_codesets_default_Ignore() set_codesets_default_CMockIgnore()
void set_codesets_default_CMockIgnore(void);
#define set_codesets_default_Expect(cs_opt) set_codesets_default_CMockExpect(__LINE__, cs_opt)
void set_codesets_default_CMockExpect(UNITY_LINE_TYPE cmock_line, CODESET_OPTIONS* cs_opt);
typedef void (* CMOCK_set_codesets_default_CALLBACK)(CODESET_OPTIONS* cs_opt, int cmock_num_calls);
void set_codesets_default_StubWithCallback(CMOCK_set_codesets_default_CALLBACK Callback);
#define register_codesets_Ignore() register_codesets_CMockIgnore()
void register_codesets_CMockIgnore(void);
#define register_codesets_Expect(rmi, cs_opt) register_codesets_CMockExpect(__LINE__, rmi, cs_opt)
void register_codesets_CMockExpect(UNITY_LINE_TYPE cmock_line, RIP_MANAGER_INFO* rmi, CODESET_OPTIONS* cs_opt);
typedef void (* CMOCK_register_codesets_CALLBACK)(RIP_MANAGER_INFO* rmi, CODESET_OPTIONS* cs_opt, int cmock_num_calls);
void register_codesets_StubWithCallback(CMOCK_register_codesets_CALLBACK Callback);
#define gstring_from_string_IgnoreAndReturn(cmock_retval) gstring_from_string_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void gstring_from_string_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define gstring_from_string_ExpectAndReturn(rmi, m, mlen, c, codeset_type, cmock_retval) gstring_from_string_CMockExpectAndReturn(__LINE__, rmi, m, mlen, c, codeset_type, cmock_retval)
void gstring_from_string_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, RIP_MANAGER_INFO* rmi, mchar* m, int mlen, char* c, int codeset_type, int cmock_to_return);
typedef int (* CMOCK_gstring_from_string_CALLBACK)(RIP_MANAGER_INFO* rmi, mchar* m, int mlen, char* c, int codeset_type, int cmock_num_calls);
void gstring_from_string_StubWithCallback(CMOCK_gstring_from_string_CALLBACK Callback);
#define string_from_gstring_IgnoreAndReturn(cmock_retval) string_from_gstring_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void string_from_gstring_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define string_from_gstring_ExpectAndReturn(rmi, c, clen, m, codeset_type, cmock_retval) string_from_gstring_CMockExpectAndReturn(__LINE__, rmi, c, clen, m, codeset_type, cmock_retval)
void string_from_gstring_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, RIP_MANAGER_INFO* rmi, char* c, int clen, mchar* m, int codeset_type, int cmock_to_return);
typedef int (* CMOCK_string_from_gstring_CALLBACK)(RIP_MANAGER_INFO* rmi, char* c, int clen, mchar* m, int codeset_type, int cmock_num_calls);
void string_from_gstring_StubWithCallback(CMOCK_string_from_gstring_CALLBACK Callback);
#define mstrdup_IgnoreAndReturn(cmock_retval) mstrdup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mstrdup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, mchar* cmock_to_return);
#define mstrdup_ExpectAndReturn(src, cmock_retval) mstrdup_CMockExpectAndReturn(__LINE__, src, cmock_retval)
void mstrdup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, mchar* src, mchar* cmock_to_return);
typedef mchar* (* CMOCK_mstrdup_CALLBACK)(mchar* src, int cmock_num_calls);
void mstrdup_StubWithCallback(CMOCK_mstrdup_CALLBACK Callback);
#define mstrcpy_IgnoreAndReturn(cmock_retval) mstrcpy_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mstrcpy_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, mchar* cmock_to_return);
#define mstrcpy_ExpectAndReturn(dest, src, cmock_retval) mstrcpy_CMockExpectAndReturn(__LINE__, dest, src, cmock_retval)
void mstrcpy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, mchar* dest, const mchar* src, mchar* cmock_to_return);
typedef mchar* (* CMOCK_mstrcpy_CALLBACK)(mchar* dest, const mchar* src, int cmock_num_calls);
void mstrcpy_StubWithCallback(CMOCK_mstrcpy_CALLBACK Callback);
#define msnprintf_IgnoreAndReturn(cmock_retval) msnprintf_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void msnprintf_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define msnprintf_ExpectAndReturn(dest, n, fmt, cmock_retval) msnprintf_CMockExpectAndReturn(__LINE__, dest, n, fmt, cmock_retval)
void msnprintf_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, mchar* dest, size_t n, const mchar* fmt, int cmock_to_return);
typedef int (* CMOCK_msnprintf_CALLBACK)(mchar* dest, size_t n, const mchar* fmt, int cmock_num_calls);
void msnprintf_StubWithCallback(CMOCK_msnprintf_CALLBACK Callback);
#define mstrncpy_Ignore() mstrncpy_CMockIgnore()
void mstrncpy_CMockIgnore(void);
#define mstrncpy_Expect(dst, src, n) mstrncpy_CMockExpect(__LINE__, dst, src, n)
void mstrncpy_CMockExpect(UNITY_LINE_TYPE cmock_line, mchar* dst, mchar* src, int n);
typedef void (* CMOCK_mstrncpy_CALLBACK)(mchar* dst, mchar* src, int n, int cmock_num_calls);
void mstrncpy_StubWithCallback(CMOCK_mstrncpy_CALLBACK Callback);
#define mstrlen_IgnoreAndReturn(cmock_retval) mstrlen_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mstrlen_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define mstrlen_ExpectAndReturn(s, cmock_retval) mstrlen_CMockExpectAndReturn(__LINE__, s, cmock_retval)
void mstrlen_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, mchar* s, size_t cmock_to_return);
typedef size_t (* CMOCK_mstrlen_CALLBACK)(mchar* s, int cmock_num_calls);
void mstrlen_StubWithCallback(CMOCK_mstrlen_CALLBACK Callback);
#define mstrchr_IgnoreAndReturn(cmock_retval) mstrchr_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mstrchr_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, mchar* cmock_to_return);
#define mstrchr_ExpectAndReturn(ws, wc, cmock_retval) mstrchr_CMockExpectAndReturn(__LINE__, ws, wc, cmock_retval)
void mstrchr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const mchar* ws, mchar wc, mchar* cmock_to_return);
typedef mchar* (* CMOCK_mstrchr_CALLBACK)(const mchar* ws, mchar wc, int cmock_num_calls);
void mstrchr_StubWithCallback(CMOCK_mstrchr_CALLBACK Callback);
#define mstrrchr_IgnoreAndReturn(cmock_retval) mstrrchr_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mstrrchr_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, mchar* cmock_to_return);
#define mstrrchr_ExpectAndReturn(ws, wc, cmock_retval) mstrrchr_CMockExpectAndReturn(__LINE__, ws, wc, cmock_retval)
void mstrrchr_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const mchar* ws, mchar wc, mchar* cmock_to_return);
typedef mchar* (* CMOCK_mstrrchr_CALLBACK)(const mchar* ws, mchar wc, int cmock_num_calls);
void mstrrchr_StubWithCallback(CMOCK_mstrrchr_CALLBACK Callback);
#define mstrncat_IgnoreAndReturn(cmock_retval) mstrncat_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mstrncat_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, mchar* cmock_to_return);
#define mstrncat_ExpectAndReturn(ws1, ws2, n, cmock_retval) mstrncat_CMockExpectAndReturn(__LINE__, ws1, ws2, n, cmock_retval)
void mstrncat_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, mchar* ws1, const mchar* ws2, size_t n, mchar* cmock_to_return);
typedef mchar* (* CMOCK_mstrncat_CALLBACK)(mchar* ws1, const mchar* ws2, size_t n, int cmock_num_calls);
void mstrncat_StubWithCallback(CMOCK_mstrncat_CALLBACK Callback);
#define mstrcmp_IgnoreAndReturn(cmock_retval) mstrcmp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mstrcmp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define mstrcmp_ExpectAndReturn(ws1, ws2, cmock_retval) mstrcmp_CMockExpectAndReturn(__LINE__, ws1, ws2, cmock_retval)
void mstrcmp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const mchar* ws1, const mchar* ws2, int cmock_to_return);
typedef int (* CMOCK_mstrcmp_CALLBACK)(const mchar* ws1, const mchar* ws2, int cmock_num_calls);
void mstrcmp_StubWithCallback(CMOCK_mstrcmp_CALLBACK Callback);
#define mtol_IgnoreAndReturn(cmock_retval) mtol_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void mtol_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, long int cmock_to_return);
#define mtol_ExpectAndReturn(string, cmock_retval) mtol_CMockExpectAndReturn(__LINE__, string, cmock_retval)
void mtol_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const mchar* string, long int cmock_to_return);
typedef long int (* CMOCK_mtol_CALLBACK)(const mchar* string, int cmock_num_calls);
void mtol_StubWithCallback(CMOCK_mtol_CALLBACK Callback);
#define is_id3_unicode_IgnoreAndReturn(cmock_retval) is_id3_unicode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void is_id3_unicode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define is_id3_unicode_ExpectAndReturn(mchar_cs, cmock_retval) is_id3_unicode_CMockExpectAndReturn(__LINE__, mchar_cs, cmock_retval)
void is_id3_unicode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, RIP_MANAGER_INFO* mchar_cs, int cmock_to_return);
typedef int (* CMOCK_is_id3_unicode_CALLBACK)(RIP_MANAGER_INFO* mchar_cs, int cmock_num_calls);
void is_id3_unicode_StubWithCallback(CMOCK_is_id3_unicode_CALLBACK Callback);
#define utf8_string_from_string_IgnoreAndReturn(cmock_retval) utf8_string_from_string_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void utf8_string_from_string_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, gchar* cmock_to_return);
#define utf8_string_from_string_ExpectAndReturn(src, codeset, cmock_retval) utf8_string_from_string_CMockExpectAndReturn(__LINE__, src, codeset, cmock_retval)
void utf8_string_from_string_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* src, char* codeset, gchar* cmock_to_return);
typedef gchar* (* CMOCK_utf8_string_from_string_CALLBACK)(char* src, char* codeset, int cmock_num_calls);
void utf8_string_from_string_StubWithCallback(CMOCK_utf8_string_from_string_CALLBACK Callback);

#endif
