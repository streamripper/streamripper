/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKSOCKLIB_H
#define _MOCKSOCKLIB_H

#include "socklib.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC)
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mocksocklib_Init(void);
void Mocksocklib_Destroy(void);
void Mocksocklib_Verify(void);




#define socklib_init_IgnoreAndReturn(cmock_retval) socklib_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void socklib_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, error_code cmock_to_return);
#define socklib_init_ExpectAndReturn(cmock_retval) socklib_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void socklib_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, error_code cmock_to_return);
typedef error_code (* CMOCK_socklib_init_CALLBACK)(int cmock_num_calls);
void socklib_init_StubWithCallback(CMOCK_socklib_init_CALLBACK Callback);
#define socklib_open_IgnoreAndReturn(cmock_retval) socklib_open_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void socklib_open_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, error_code cmock_to_return);
#define socklib_open_ExpectAndReturn(socket_handle, host, port, if_name, timeout, cmock_retval) socklib_open_CMockExpectAndReturn(__LINE__, socket_handle, host, port, if_name, timeout, cmock_retval)
void socklib_open_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, HSOCKET* socket_handle, char* host, int port, char* if_name, int timeout, error_code cmock_to_return);
typedef error_code (* CMOCK_socklib_open_CALLBACK)(HSOCKET* socket_handle, char* host, int port, char* if_name, int timeout, int cmock_num_calls);
void socklib_open_StubWithCallback(CMOCK_socklib_open_CALLBACK Callback);
#define socklib_close_Ignore() socklib_close_CMockIgnore()
void socklib_close_CMockIgnore(void);
#define socklib_close_Expect(socket_handle) socklib_close_CMockExpect(__LINE__, socket_handle)
void socklib_close_CMockExpect(UNITY_LINE_TYPE cmock_line, HSOCKET* socket_handle);
typedef void (* CMOCK_socklib_close_CALLBACK)(HSOCKET* socket_handle, int cmock_num_calls);
void socklib_close_StubWithCallback(CMOCK_socklib_close_CALLBACK Callback);
#define socklib_cleanup_Ignore() socklib_cleanup_CMockIgnore()
void socklib_cleanup_CMockIgnore(void);
#define socklib_cleanup_Expect() socklib_cleanup_CMockExpect(__LINE__)
void socklib_cleanup_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_socklib_cleanup_CALLBACK)(int cmock_num_calls);
void socklib_cleanup_StubWithCallback(CMOCK_socklib_cleanup_CALLBACK Callback);
#define socklib_read_header_IgnoreAndReturn(cmock_retval) socklib_read_header_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void socklib_read_header_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, error_code cmock_to_return);
#define socklib_read_header_ExpectAndReturn(rmi, socket_handle, buffer, size, cmock_retval) socklib_read_header_CMockExpectAndReturn(__LINE__, rmi, socket_handle, buffer, size, cmock_retval)
void socklib_read_header_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, RIP_MANAGER_INFO* rmi, HSOCKET* socket_handle, char* buffer, int size, error_code cmock_to_return);
typedef error_code (* CMOCK_socklib_read_header_CALLBACK)(RIP_MANAGER_INFO* rmi, HSOCKET* socket_handle, char* buffer, int size, int cmock_num_calls);
void socklib_read_header_StubWithCallback(CMOCK_socklib_read_header_CALLBACK Callback);
#define socklib_recvall_IgnoreAndReturn(cmock_retval) socklib_recvall_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void socklib_recvall_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, error_code cmock_to_return);
#define socklib_recvall_ExpectAndReturn(rmi, socket_handle, buffer, size, timeout, cmock_retval) socklib_recvall_CMockExpectAndReturn(__LINE__, rmi, socket_handle, buffer, size, timeout, cmock_retval)
void socklib_recvall_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, RIP_MANAGER_INFO* rmi, HSOCKET* socket_handle, char* buffer, int size, int timeout, error_code cmock_to_return);
typedef error_code (* CMOCK_socklib_recvall_CALLBACK)(RIP_MANAGER_INFO* rmi, HSOCKET* socket_handle, char* buffer, int size, int timeout, int cmock_num_calls);
void socklib_recvall_StubWithCallback(CMOCK_socklib_recvall_CALLBACK Callback);
#define socklib_sendall_IgnoreAndReturn(cmock_retval) socklib_sendall_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void socklib_sendall_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define socklib_sendall_ExpectAndReturn(socket_handle, buffer, size, cmock_retval) socklib_sendall_CMockExpectAndReturn(__LINE__, socket_handle, buffer, size, cmock_retval)
void socklib_sendall_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, HSOCKET* socket_handle, char* buffer, int size, int cmock_to_return);
typedef int (* CMOCK_socklib_sendall_CALLBACK)(HSOCKET* socket_handle, char* buffer, int size, int cmock_num_calls);
void socklib_sendall_StubWithCallback(CMOCK_socklib_sendall_CALLBACK Callback);
#define read_interface_IgnoreAndReturn(cmock_retval) read_interface_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void read_interface_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, error_code cmock_to_return);
#define read_interface_ExpectAndReturn(if_name, addr, cmock_retval) read_interface_CMockExpectAndReturn(__LINE__, if_name, addr, cmock_retval)
void read_interface_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* if_name, uint32_t* addr, error_code cmock_to_return);
typedef error_code (* CMOCK_read_interface_CALLBACK)(char* if_name, uint32_t* addr, int cmock_num_calls);
void read_interface_StubWithCallback(CMOCK_read_interface_CALLBACK Callback);

#endif
